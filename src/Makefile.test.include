# Copyright (c) 2013-2016 The Bitcoin Core developers
# Distributed under the MIT software license, see the accompanying
# file COPYING or http://www.opensource.org/licenses/mit-license.php.

bin_PROGRAMS += test/test_keepscoin
TEST_SRCDIR = test
TEST_BINARY=test/test_keepscoin$(EXEEXT)

JSON_TEST_FILES = \
  test/data/script_valid.json \
  test/data/base58_keys_valid.json \
  test/data/sig_canonical.json \
  test/data/sig_noncanonical.json \
  test/data/base58_encode_decode.json \
  test/data/base58_keys_invalid.json \
  test/data/script_invalid.json \
  test/data/tx_invalid.json \
  test/data/tx_valid.json \
  test/data/sighash.json

RAW_TEST_FILES = test/data/alertTests.raw

GENERATED_TEST_FILES = $(JSON_TEST_FILES:.json=.json.h) $(RAW_TEST_FILES:.raw=.raw.h)

KPCOIN_TEST_SUITE = \
  test/test_keepscoin.cpp
# test_keepscoin binary #
KPCOIN_TESTS =\
  test/allocator_tests.cpp \
  test/base32_tests.cpp \
  test/base58_tests.cpp \
  test/base64_tests.cpp \
  test/checkblock_tests.cpp \
  test/Checkpoints_tests.cpp \
  test/coins_tests.cpp \
  test/compress_tests.cpp \
  test/crypto_tests.cpp \
  test/DoS_tests.cpp \
  test/getarg_tests.cpp \
  test/hash_tests.cpp \
  test/key_tests.cpp \
  test/main_tests.cpp \
  test/mempool_tests.cpp \
  test/mruset_tests.cpp \
  test/multisig_tests.cpp \
  test/netbase_tests.cpp \
  test/pmt_tests.cpp \
  test/reverselock_tests.cpp \
  test/rpc_tests.cpp \
  test/sanity_tests.cpp \
  test/scheduler_tests.cpp \
  test/script_P2SH_tests.cpp \
  test/script_tests.cpp \
  test/serialize_tests.cpp \
  test/sighash_tests.cpp \
  test/sigopcount_tests.cpp \
  test/skiplist_tests.cpp \
  test/timedata_tests.cpp \
  test/torcontrol_tests.cpp \
  test/transaction_tests.cpp \
  test/uint256_tests.cpp \
  test/univalue_tests.cpp \
  test/util_tests.cpp

if ENABLE_WALLET
KPCOIN_TESTS += \
  test/accounting_tests.cpp \
  test/wallet_tests.cpp \
  test/rpc_wallet_tests.cpp
endif

test_test_keepscoin_SOURCES = $(KPCOIN_TEST_SUITE) $(KPCOIN_TESTS) $(JSON_TEST_FILES) $(RAW_TEST_FILES)
test_test_keepscoin_CPPFLAGS = $(AM_CPPFLAGS) $(KPCOIN_INCLUDES) -I$(builddir)/test/ $(TESTDEFS) $(EVENT_FLAGS)
test_test_keepscoin_LDADD = $(LIBKPCOIN_SERVER) $(LIBKPCOIN_CLI) $(LIBKPCOIN_COMMON) $(LIBKPCOIN_UTIL) $(LIBKPCOIN_CRYPTO) $(LIBUNIVALUE) \
  $(LIBLEVELDB) $(LIBLEVELDB_SSE42) $(LIBMEMENV) $(BOOST_LIBS) $(BOOST_UNIT_TEST_FRAMEWORK_LIB) $(LIBSECP256K1) $(EVENT_LIBS) $(EVENT_PTHREADS_LIBS)
if ENABLE_WALLET
test_test_keepscoin_LDADD += $(LIBKPCOIN_WALLET)
endif
test_test_keepscoin_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)

test_test_keepscoin_LDADD += $(LIBKPCOIN_CONSENSUS) $(BDB_LIBS) $(SSL_LIBS) $(CRYPTO_LIBS) $(MINIUPNPC_LIBS)
test_test_keepscoin_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS) -static

if ENABLE_ZMQ
test_test_keepscoin_LDADD += $(ZMQ_LIBS)
endif
#

nodist_test_test_keepscoin_SOURCES = $(GENERATED_TEST_FILES)

$(KPCOIN_TESTS): $(GENERATED_TEST_FILES)

CLEAN_KPCOIN_TEST = test/*.gcda test/*.gcno $(GENERATED_TEST_FILES)

CLEANFILES += $(CLEAN_KPCOIN_TEST)

keepscoin_test: $(TEST_BINARY)

keepscoin_test_check: $(TEST_BINARY) FORCE
	$(MAKE) check-TESTS TESTS=$^

keepscoin_test_clean : FORCE
	rm -f $(CLEAN_KPCOIN_TEST) $(test_test_keepscoin_OBJECTS) $(TEST_BINARY)

check-local: $(KPCOIN_TESTS:.cpp=.cpp.test)
	@echo "Running test/util/kpcoin-util-test.py..."
	$(PYTHON) $(top_builddir)/test/util/kpcoin-util-test.py
	@echo "Running test/util/rpcauth-test.py..."
	$(PYTHON) $(top_builddir)/test/util/rpcauth-test.py
	$(AM_V_at)$(MAKE) $(AM_MAKEFLAGS) -C secp256k1 check
if EMBEDDED_UNIVALUE
	$(AM_V_at)$(MAKE) $(AM_MAKEFLAGS) -C univalue check
endif

%.cpp.test: %.cpp
	@echo Running tests: `cat $< | grep -E "(BOOST_FIXTURE_TEST_SUITE\\(|BOOST_AUTO_TEST_SUITE\\()" | cut -d '(' -f 2 | cut -d ',' -f 1 | cut -d ')' -f 1` from $<
	$(AM_V_at)$(TEST_BINARY) -l test_suite -t "`cat $< | grep -E "(BOOST_FIXTURE_TEST_SUITE\\(|BOOST_AUTO_TEST_SUITE\\()" | cut -d '(' -f 2 | cut -d ',' -f 1 | cut -d ')' -f 1`" > $<.log 2>&1 || (cat $<.log && false)

%.json.h: %.json
	@$(MKDIR_P) $(@D)
	@{ \
	 echo "namespace json_tests{" && \
	 echo "static unsigned const char $(*F)[] = {" && \
	 $(HEXDUMP) -v -e '8/1 "0x%02x, "' -e '"\n"' $< | $(SED) -e 's/0x  ,//g' && \
	 echo "};};"; \
	} > "$@.new" && mv -f "$@.new" "$@"
	@echo "Generated $@"

%.raw.h: %.raw
	@$(MKDIR_P) $(@D)
	@echo "namespace alert_tests{" > $@
	@echo "static unsigned const char $(*F)[] = {" >> $@
	@$(HEXDUMP) -v -e '8/1 "0x%02x, "' -e '"\n"' $< | $(SED) -e 's/0x  ,//g' >> $@
	@echo "};};" >> $@
	@echo "Generated $@"
